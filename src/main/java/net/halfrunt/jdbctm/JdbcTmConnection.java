package net.halfrunt.jdbctm;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;

public class JdbcTmConnection implements Connection, JdbcTmSession {

	private final Connection connection;
	private volatile boolean autoCommit;

	private final Stack<Savepoint> savePoints = new Stack<Savepoint>();
	
	public JdbcTmConnection(Connection connection) throws SQLException {
		this.connection = connection;
		connection.setAutoCommit(false);
		this.savePoints.push(connection.setSavepoint());
	}

	public void clearWarnings() throws SQLException {
		this.connection.clearWarnings();
	}

	public void close() throws SQLException {
		this.connection.close();
	}

	public void commit() throws SQLException {
		this.savePoints.push(this.connection.setSavepoint());
	}

	public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		return this.connection.createArrayOf(typeName, elements);
	}

	public Blob createBlob() throws SQLException {
		return this.connection.createBlob();
	}

	public Clob createClob() throws SQLException {
		return this.connection.createClob();
	}

	public NClob createNClob() throws SQLException {
		return this.connection.createNClob();
	}

	public SQLXML createSQLXML() throws SQLException {
		return this.connection.createSQLXML();
	}

	public Statement createStatement() throws SQLException {
		return this.connection.createStatement();
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return this.connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return this.connection.createStatement(resultSetType, resultSetConcurrency);
	}

	public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		return this.connection.createStruct(typeName, attributes);
	}

	public boolean getAutoCommit() throws SQLException {
		return this.autoCommit;
	}

	public String getCatalog() throws SQLException {
		return this.connection.getCatalog();
	}

	public Properties getClientInfo() throws SQLException {
		return this.connection.getClientInfo();
	}

	public String getClientInfo(String name) throws SQLException {
		return this.connection.getClientInfo(name);
	}

	public int getHoldability() throws SQLException {
		return this.connection.getHoldability();
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		return this.connection.getMetaData();
	}

	public int getTransactionIsolation() throws SQLException {
		return this.connection.getTransactionIsolation();
	}

	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return this.connection.getTypeMap();
	}

	public SQLWarning getWarnings() throws SQLException {
		return this.connection.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return this.connection.isClosed();
	}

	public boolean isReadOnly() throws SQLException {
		return this.connection.isReadOnly();
	}

	public boolean isValid(int timeout) throws SQLException {
		return this.connection.isValid(timeout);
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return this.connection.isWrapperFor(iface);
	}

	public String nativeSQL(String sql) throws SQLException {
		return this.connection.nativeSQL(sql);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return this.connection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return this.connection.prepareCall(sql, resultSetType, resultSetConcurrency);
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		return this.connection.prepareCall(sql);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return this.connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return this.connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return this.connection.prepareStatement(sql, autoGeneratedKeys);
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return this.connection.prepareStatement(sql, columnIndexes);
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return this.connection.prepareStatement(sql, columnNames);
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return this.connection.prepareStatement(sql);
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		throw new java.sql.SQLFeatureNotSupportedException("releaseSavepoint");
	}

	public void rollback() throws SQLException {
		this.connection.rollback(this.savePoints.pop());
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		throw new java.sql.SQLFeatureNotSupportedException("rollback(Savepoint savepoint)");
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		this.autoCommit = autoCommit;
	}

	public void setCatalog(String catalog) throws SQLException {
		this.connection.setCatalog(catalog);
	}

	public void setClientInfo(Properties properties) throws SQLClientInfoException {
		this.connection.setClientInfo(properties);
	}

	public void setClientInfo(String name, String value) throws SQLClientInfoException {
		this.connection.setClientInfo(name, value);
	}

	public void setHoldability(int holdability) throws SQLException {
		this.connection.setHoldability(holdability);
	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		this.connection.setReadOnly(readOnly);
	}

	public Savepoint setSavepoint() throws SQLException {
		throw new java.sql.SQLFeatureNotSupportedException("setSavepoint");
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		throw new java.sql.SQLFeatureNotSupportedException("setSavepoint(String name)");
	}

	public void setTransactionIsolation(int level) throws SQLException {
		this.connection.setTransactionIsolation(level);
	}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		this.connection.setTypeMap(map);
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		return this.connection.unwrap(iface);
	}

	public void release() throws SQLException {
		if (!this.savePoints.isEmpty()) {
			this.connection.rollback(this.savePoints.pop());
		}
	}

}
